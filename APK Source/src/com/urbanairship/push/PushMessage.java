// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.urbanairship.push;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import com.urbanairship.CoreReceiver;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.util.UAStringUtil;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.json.JSONObject;

// Referenced classes of package com.urbanairship.push:
//            PushManager, PushNotificationBuilder

class PushMessage
{

    private Bundle a;

    public PushMessage(Bundle bundle)
    {
        a = bundle;
    }

    private Map i()
    {
        HashMap hashmap = new HashMap();
        String s;
        for (Iterator iterator = a.keySet().iterator(); iterator.hasNext(); hashmap.put(s, a.getString(s)))
        {
            s = (String)iterator.next();
        }

        return hashmap;
    }

    final boolean a()
    {
        String s;
        s = a.getString("com.urbanairship.push.EXPIRATION");
        if (UAStringUtil.a(s))
        {
            break MISSING_BLOCK_LABEL_87;
        }
        Logger.c((new StringBuilder("Notification expiration time is \"")).append(s).append("\"").toString());
        long l;
        long l1;
        l = Long.parseLong(s);
        l1 = System.currentTimeMillis();
        if (l * 1000L < l1)
        {
            return true;
        }
        break MISSING_BLOCK_LABEL_87;
        NumberFormatException numberformatexception;
        numberformatexception;
        Logger.c((new StringBuilder("Ignoring malformed expiration time: ")).append(numberformatexception.getMessage()).toString());
        return false;
    }

    final boolean b()
    {
        return a.get("com.urbanairship.push.PING") != null;
    }

    final String c()
    {
        return a.getString("com.urbanairship.push.CANONICAL_PUSH_ID");
    }

    final String d()
    {
        return a.getString("com.urbanairship.push.APID");
    }

    final String e()
    {
        return a.getString("_uamid");
    }

    final String f()
    {
        return a.getString("com.urbanairship.push.PUSH_ID");
    }

    final int g()
    {
        PushNotificationBuilder pushnotificationbuilder;
        pushnotificationbuilder = PushManager.b().e();
        if (pushnotificationbuilder == null)
        {
            break MISSING_BLOCK_LABEL_209;
        }
        Object obj;
        obj = i();
        obj = pushnotificationbuilder.a(a.getString("com.urbanairship.push.ALERT"), ((Map) (obj)));
        if (obj == null)
        {
            break MISSING_BLOCK_LABEL_209;
        }
        int j = pushnotificationbuilder.b();
        Intent intent = new Intent((new StringBuilder("com.urbanairship.push.NOTIFICATION_OPENED_PROXY.")).append(UUID.randomUUID().toString()).toString());
        intent.setClass(UAirship.a().g(), com/urbanairship/CoreReceiver);
        intent.putExtras(h());
        if (((Notification) (obj)).contentIntent != null)
        {
            intent.putExtra("com.urbanairship.push.CONTENT_INTENT", ((Notification) (obj)).contentIntent);
        }
        obj.contentIntent = PendingIntent.getBroadcast(UAirship.a().g(), 0, intent, 0);
        ((NotificationManager)UAirship.a().g().getSystemService("notification")).notify(j, ((Notification) (obj)));
        return j;
        Exception exception;
        exception;
        j = 0;
_L2:
        Logger.c((new StringBuilder("An exception occurred while creating or displaying the notification generated by ")).append(pushnotificationbuilder.getClass().getName()).toString(), exception);
        Logger.e((new StringBuilder("For push message: ")).append(this).toString());
        return j;
        exception;
        if (true) goto _L2; else goto _L1
_L1:
        return 0;
    }

    final Bundle h()
    {
        return new Bundle(a);
    }

    public final String toString()
    {
        return (new JSONObject(i())).toString();
    }
}
